/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Log {
    constructor() {
        this.warn = console.warn;
    }
    setUp(plugin) {
        this.isDev = plugin.manifest.name.toLowerCase().contains('canary');
        if (this.isDev) {
            this.info = console.info;
        }
    }
    info(..._) {
        // empty function in non dev envs
    }
}
const log = new Log();

const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 500;
const DEFAULT_BUFFER = 100;
// recursive function that calls itself to create a list of nodes and edges
// to add to the canvas
// Some notes
// - it only allows unique notes
// - it priotises notes that have a lower depth overwriting notes that already exist
// - Supports incoming and outgoing links
function createChildren(path, resolvedLinks, depth, direction = 'outgoing', canvasHashes = [{}, {}], num = 0, rowCount = {}) {
    log.info(path, depth, num);
    const isOutgoing = direction === 'outgoing';
    if (!rowCount[num]) {
        rowCount[num] = 0;
    }
    let [returnedNodes, returnedEdges] = canvasHashes;
    const fileLinks = Object.keys(resolvedLinks[path] || {});
    // if returnedNodes is empty we can assume this is the first round and we add
    // it to the returnedNodes hash
    if (Object.keys(returnedNodes).length === 0) {
        returnedNodes[path] = {
            id: path,
            width: DEFAULT_WIDTH,
            height: DEFAULT_HEIGHT,
            y: (fileLinks.length * (DEFAULT_HEIGHT + DEFAULT_BUFFER)) / 2 -
                DEFAULT_HEIGHT / 2,
            x: 0,
            type: 'file',
            file: path,
            color: '1',
        };
    }
    // we use this to do a comparison to make a decision about if the level
    // of the current node is lower then the previous version of the node (if exists)
    const currentLevelXValue = (DEFAULT_WIDTH + 500) * (num + 1);
    for (let i = 0; i < fileLinks.length; i++) {
        const link = fileLinks[i];
        log.info(Array.from(new Array(num))
            .map(() => '--')
            .join(''), num, link);
        // checks that node doesn't already exist and if it does it's x (using as a
        // reresentation of level) is higher then the new node then we override it.
        if (!returnedNodes[link] || returnedNodes[link].x > currentLevelXValue) {
            returnedNodes[link] = {
                id: link,
                width: DEFAULT_WIDTH,
                height: DEFAULT_HEIGHT,
                x: isOutgoing ? currentLevelXValue : 0 - currentLevelXValue,
                y: rowCount[num] * (DEFAULT_HEIGHT + DEFAULT_BUFFER),
                type: 'file',
                file: link,
            };
            rowCount[num] = rowCount[num] + 1;
        }
        const edgeId = `${path}-${link}`;
        returnedEdges[edgeId] = {
            id: edgeId,
            fromSide: 'right',
            toSide: 'left',
            fromNode: isOutgoing ? path : link,
            toNode: isOutgoing ? link : path,
        };
        if (num < depth) {
            const nextDepth = num + 1;
            const [childNodes, childEdges] = createChildren(link, resolvedLinks, depth, direction, [returnedNodes, returnedEdges], nextDepth, rowCount);
            returnedNodes = Object.assign(Object.assign({}, returnedNodes), childNodes);
            returnedEdges = Object.assign(Object.assign({}, returnedEdges), childEdges);
        }
    }
    return [returnedNodes, returnedEdges];
}
function createCanvasFromFile(activeFile, resolvedLinks, doesFileExist, createFile, openFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const { path: filePath, basename: fileName } = activeFile;
        const resolvedIncomingLinks = buildResolvedIncomingLinks(resolvedLinks);
        // TODO: create a combined resolved links so we're not passing two different ones
        // to the same func
        const [outgoingNodes, outgoingEdges] = createChildren(filePath, resolvedLinks, 1);
        const [incomingNodes, incomingEdges] = createChildren(filePath, resolvedIncomingLinks, 0, 'incoming', [outgoingNodes, outgoingEdges]);
        const nodes = Object.values(incomingNodes);
        const edges = Object.values(incomingEdges);
        const canvas = { nodes, edges };
        log.info(canvas);
        const path = getFileName(`${fileName}-canvas.canvas`, doesFileExist);
        const result = yield createFile(path, JSON.stringify(canvas, null, 2));
        openFile(result);
        log.info(result);
        return result;
    });
}
// buildResolvedIncomingLinks takes the outgoingResolvedLinks and flips it to
// incoming links where the top level key is the path and the record value is a
// is a record with the keys being other paths that point to it. The number value is not used
// and set to one
const buildResolvedIncomingLinks = (resolvedLinks) => {
    const resolvedIncomingLinks = {};
    Object.entries(resolvedLinks).forEach(([linker, destination]) => {
        Object.keys(destination).forEach((path) => {
            if (!resolvedIncomingLinks[path]) {
                resolvedIncomingLinks[path] = {};
            }
            resolvedIncomingLinks[path][linker] = 1;
        });
    });
    return resolvedIncomingLinks;
};
// getFileName looks for a safe file name to use and returns it.
// will take the path and add -n to the end until I finds one that doesn't
// exist
const getFileName = (path, doesFileExist) => {
    if (!doesFileExist(path)) {
        return path;
    }
    const limit = 50;
    const [name, extention] = path.split('.');
    for (let i = 0; i < limit; i++) {
        const newPath = `${name}-${i}.${extention}`;
        log.info(newPath);
        if (!doesFileExist(newPath)) {
            return newPath;
        }
    }
    log.warn(`no paths avialable for ${path}`);
};

class LinkExploderPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            log.setUp(this);
            log.info(`${this.manifest.name} Loaded`);
            this.addCommand({
                id: 'link-exploder-canvas-builder',
                name: 'Create Canvas From File Links',
                checkCallback: (checking) => {
                    if (checking) {
                        return true;
                    }
                    const activeFile = this.app.workspace.getActiveFile();
                    if (activeFile) {
                        const doesFileExist = (path) => Boolean(this.app.metadataCache.getCache(path));
                        const createFile = (path, data) => this.app.vault.create(path, data);
                        const openFile = (currentFile) => this.app.workspace.getLeaf().openFile(currentFile);
                        createCanvasFromFile(activeFile, this.app.metadataCache.resolvedLinks, doesFileExist, createFile, openFile).catch((e) => {
                            new obsidian.Notice(`Something went wrong with creating the canvas: ${e}`);
                            console.error(e);
                        });
                    }
                },
            });
            if (this.manifest.name.contains('Canary')) {
                this.addCommand({
                    id: 'reloadLinkExploder',
                    name: 'Reload LinkExploder (dev)',
                    callback: () => {
                        const id = this.manifest.id;
                        // @ts-ignore - for this.app.plugins
                        const plugins = this.app.plugins;
                        plugins.disablePlugin(id).then(() => plugins.enablePlugin(id));
                        new obsidian.Notice('Reloading LinkExploder');
                    },
                    hotkeys: [{ key: 'r', modifiers: ['Mod', 'Shift'] }],
                });
            }
        });
    }
    onunload() {
        log.info('unloading link exploder');
    }
}

module.exports = LinkExploderPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
